import React, { useState } from 'react';
import { User, Lock, FileText, Shield } from 'lucide-react';

const ProfileSettings = () => {
  const [activeSection, setActiveSection] = useState('profile');
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    firstName: 'Lincoln',
    lastName: 'Philips',
    email: 'lincoln.philips@example.com',
    phoneNumber: '0912345678',
    hospitalName: 'Silver Park Medical Center',
    gender: 'Male',
    city: 'New York',
    state: 'NY',
    country: 'USA'
  });
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [termsAndConditions, setTermsAndConditions] = useState('Lorem ipsum dolor sit amet, consectetur adipiscing elit...');
  const [privacyPolicy, setPrivacyPolicy] = useState('Ut enim ad minim veniam, quis nostrud exercitation ullamco...');

  const handleProfileChange = (e) => {
    setProfileData({ ...profileData, [e.target.name]: e.target.value });
  };

  const handlePasswordChange = (e) => {
    setPasswordData({ ...passwordData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsEditing(false);
    // Here you would typically send the updated data to your backend
    console.log('Updated data:', profileData);
  };

  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    // Here you would typically send the password change request to your backend
    console.log('Password change request:', passwordData);
    setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
  };

  const renderProfile = () => (
    <form onSubmit={handleSubmit}>
      <div className="grid grid-cols-2 gap-4">
        {Object.entries(profileData).map(([key, value]) => (
          <div key={key}>
            <label className="block text-sm text-gray-600 mb-1">{key.charAt(0).toUpperCase() + key.slice(1)}</label>
            {isEditing ? (
              <input
                type="text"
                name={key}
                value={value}
                onChange={handleProfileChange}
                className="w-full p-2 border rounded"
              />
            ) : (
              <p className="font-medium">{value}</p>
            )}
          </div>
        ))}
      </div>
      {isEditing && (
        <button type="submit" className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
          Save Changes
        </button>
      )}
    </form>
  );

  const renderPasswordChange = () => (
    <form onSubmit={handlePasswordSubmit} className="space-y-4">
      {['currentPassword', 'newPassword', 'confirmPassword'].map((field) => (
        <div key={field}>
          <label className="block text-sm text-gray-600 mb-1">
            {field.split(/(?=[A-Z])/).join(' ').charAt(0).toUpperCase() + field.split(/(?=[A-Z])/).join(' ').slice(1)}
          </label>
          <input
            type="password"
            name={field}
            value={passwordData[field]}
            onChange={handlePasswordChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
      ))}
      <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
        Change Password
      </button>
    </form>
  );

  const renderEditableTextArea = (content, setContent, title) => (
    <div>
      <h3 className="text-xl font-semibold mb-4">{title}</h3>
      {isEditing ? (
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="w-full h-64 p-2 border rounded"
        />
      ) : (
        <p>{content}</p>
      )}
    </div>
  );

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-blue-700 to-blue-900">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-5xl overflow-hidden">
        <div className="text-2xl font-bold text-white bg-blue-600 p-4">
          Profile Setting
        </div>
        <div className="flex">
          {/* Sidebar */}
          <div className="w-1/4 bg-gray-100 p-4">
            <div className="flex flex-col items-center mb-6">
              <img
                src="/api/placeholder/150/150"
                alt="Lincoln Philips"
                className="w-32 h-32 rounded-full mb-2"
              />
              <h2 className="text-xl font-semibold">Lincoln Philips</h2>
            </div>
            <nav>
              <ul>
                {[
                  { id: 'profile', icon: User, label: 'Profile' },
                  { id: 'password', icon: Lock, label: 'Change Password' },
                  { id: 'terms', icon: FileText, label: 'Terms & Condition' },
                  { id: 'privacy', icon: Shield, label: 'Privacy Policy' }
                ].map((item) => (
                  <li key={item.id} className="mb-2">
                    <a
                      href="#"
                      onClick={() => setActiveSection(item.id)}
                      className={`flex items-center ${activeSection === item.id ? 'text-blue-600 font-medium' : 'text-gray-600 hover:text-blue-600'}`}
                    >
                      <item.icon className="mr-2" size={20} />
                      {item.label}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          </div>

          {/* Main Content */}
          <div className="w-3/4 p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold">{activeSection.charAt(0).toUpperCase() + activeSection.slice(1)}</h3>
              {activeSection !== 'password' && (
                <button
                  onClick={() => setIsEditing(!isEditing)}
                  className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
                >
                  {isEditing ? 'Cancel' : 'Edit'}
                </button>
              )}
            </div>
            {activeSection === 'profile' && renderProfile()}
            {activeSection === 'password' && renderPasswordChange()}
            {activeSection === 'terms' && renderEditableTextArea(termsAndConditions, setTermsAndConditions, 'Terms & Conditions')}
            {activeSection === 'privacy' && renderEditableTextArea(privacyPolicy, setPrivacyPolicy, 'Privacy Policy')}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileSettings;